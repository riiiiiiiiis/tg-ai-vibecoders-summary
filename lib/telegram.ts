import type { ReportPayload, PersonaReportPayload } from './types';

// Telegram API types
export type TelegramMessage = {
  chat_id: string;
  text: string;
  parse_mode: 'Markdown' | 'MarkdownV2';
  message_thread_id?: number;
};

export type TelegramResponse = {
  ok: boolean;
  result?: any;
  error_code?: number;
  description?: string;
};

const TELEGRAM_API_URL = process.env.TELEGRAM_API_URL || 'https://api.telegram.org';
const SAFE_MESSAGE_LENGTH = 4000;

/**
 * Validate Telegram configuration from environment variables
 */
export function validateTelegramConfig(): { valid: boolean; error?: string } {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!token) {
    return { valid: false, error: 'TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è' };
  }

  if (!chatId) {
    return { valid: false, error: 'TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è' };
  }

  return { valid: true };
}

/**
 * Format report payload into Telegram Markdown message
 * Handles both standard and persona reports
 */
export function formatSummaryForTelegram(report: ReportPayload | PersonaReportPayload): string {
  if (!report) {
    return 'ü§ñ *AI –î–∞–π–¥–∂–µ—Å—Ç*\n\n–û—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
  }

  // Check if it's a persona report
  if ('persona' in report && 'data' in report) {
    return formatPersonaReport(report);
  }

  // Standard report format - must have summary, themes, insights
  if ('summary' in report && 'themes' in report && 'insights' in report) {
    const { date, summary, themes, insights } = report;

    let message = `ü§ñ *AI –î–∞–π–¥–∂–µ—Å—Ç –∑–∞ ${date}*\n\n`;

    // Summary section
    if (summary) {
      message += `üìä *–°–≤–æ–¥–∫–∞*\n${summary}\n\n`;
    }

    // Themes section
    if (themes && themes.length > 0) {
      message += `üéØ *–¢–µ–º—ã –¥–Ω—è*\n`;
      themes.forEach((theme: string) => {
        message += `‚Ä¢ ${theme}\n`;
      });
      message += '\n';
    }

    // Insights section
    if (insights && insights.length > 0) {
      message += `üí° *–ò–Ω—Å–∞–π—Ç—ã*\n`;
      insights.forEach((insight: string) => {
        message += `‚Ä¢ ${insight}\n`;
      });
      message += '\n';
    }

    message += '---\n_–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º_';

    return message;
  }

  return 'ü§ñ *AI –î–∞–π–¥–∂–µ—Å—Ç*\n\n–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞';
}

/**
 * Format persona report for Telegram
 */
function formatPersonaReport(report: { date: string; persona?: string; data: any }): string {
  const lines: string[] = [];
  const { date, persona, data } = report;

  lines.push(`ü§ñ *AI –î–∞–π–¥–∂–µ—Å—Ç –∑–∞ ${date}*`);
  lines.push(`üîÆ *–≠–∫—Å–ø–µ—Ä—Ç: ${getPersonaEmoji(persona)}*`);
  lines.push('');

  if (persona === 'business') {
    if (data.monetization_ideas?.length > 0) {
      lines.push('üí∞ *–ò–¥–µ–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏:*');
      data.monetization_ideas.forEach((idea: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${idea}`);
      });
      lines.push('');
    }

    if (data.revenue_strategies?.length > 0) {
      lines.push('üìà *–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ—Ö–æ–¥–∞:*');
      data.revenue_strategies.forEach((strategy: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${strategy}`);
      });
      lines.push('');
    }

    if (data.roi_insights?.length > 0) {
      lines.push('üî• *ROI\\-–∏–Ω—Å–∞–π—Ç—ã:*');
      data.roi_insights.forEach((insight: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${insight}`);
      });
    }
  } else if (persona === 'psychologist') {
    if (data.group_atmosphere) {
      lines.push('üå°Ô∏è *–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≥—Ä—É–ø–ø—ã:*');
      lines.push(data.group_atmosphere);
      lines.push('');
    }

    if (data.psychological_archetypes?.length > 0) {
      lines.push('üé≠ *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã:*');
      data.psychological_archetypes.forEach((archetype: any, idx: number) => {
        lines.push(`${idx + 1}\\. *${archetype.name}* \\(${archetype.archetype}\\) \\- ${archetype.influence}`);
      });
      lines.push('');
    }

    if (data.emotional_patterns?.length > 0) {
      lines.push('üí° *–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:*');
      data.emotional_patterns.forEach((pattern: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${pattern}`);
      });
      lines.push('');
    }

    if (data.group_dynamics?.length > 0) {
      lines.push('‚öôÔ∏è *–ì—Ä—É–ø–ø–æ–≤–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:*');
      data.group_dynamics.forEach((dynamic: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${dynamic}`);
      });
    }
  } else if (persona === 'creative') {
    if (data.creative_temperature) {
      lines.push('üå°Ô∏è *–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:*');
      lines.push(data.creative_temperature);
      lines.push('');
    }

    if (data.viral_concepts?.length > 0) {
      lines.push('üöÄ *–í–∏—Ä—É—Å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:*');
      data.viral_concepts.forEach((concept: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${concept}`);
      });
      lines.push('');
    }

    if (data.content_formats?.length > 0) {
      lines.push('üé® *–ö–æ–Ω—Ç–µ–Ω—Ç\\-—Ñ–æ—Ä–º–∞—Ç—ã:*');
      data.content_formats.forEach((format: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${format}`);
      });
      lines.push('');
    }

    if (data.trend_opportunities?.length > 0) {
      lines.push('üî• *–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*');
      data.trend_opportunities.forEach((opportunity: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${opportunity}`);
      });
    }
  } else {
    // Generic personas (twitter, reddit, curator)
    if (data.summary) {
      lines.push(data.summary);
      lines.push('');
    }

    if (data.themes?.length > 0) {
      lines.push('üéØ *–¢–µ–º—ã:*');
      data.themes.forEach((theme: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${theme}`);
      });
      lines.push('');
    }

    if (data.insights?.length > 0) {
      lines.push('üí° *–ò–Ω—Å–∞–π—Ç—ã:*');
      data.insights.forEach((insight: string, idx: number) => {
        lines.push(`${idx + 1}\\. ${insight}`);
      });
    }
  }

  lines.push('');
  lines.push('---');
  lines.push('_–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI\\-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º_');

  return lines.join('\n');
}

/**
 * Get emoji for persona type
 */
function getPersonaEmoji(persona?: string): string {
  switch (persona) {
    case 'business': return 'üíº –ë–∏–∑–Ω–µ—Å\\-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç';
    case 'psychologist': return 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤';
    case 'creative': return 'üöÄ –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥';
    case 'twitter': return 'üê¶ Twitter\\-—Å–∫–µ–ø—Ç–∏–∫';
    case 'reddit': return 'üëΩ Reddit\\-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä';
    case 'curator': return 'üéØ –ö—É—Ä–∞—Ç–æ—Ä\\-—Ä–µ–∞–ª–∏—Å—Ç';
    default: return 'üîÆ –ê–Ω–∞–ª–∏—Ç–∏–∫';
  }
}

/**
 * Split long message into multiple parts
 */
function splitMessage(message: string): string[] {
  if (message.length <= SAFE_MESSAGE_LENGTH) {
    return [message];
  }

  const parts: string[] = [];
  const lines = message.split('\n');
  let currentPart = '';

  for (const line of lines) {
    // If adding this line would exceed the limit, save current part and start new one
    if (currentPart.length + line.length + 1 > SAFE_MESSAGE_LENGTH) {
      if (currentPart) {
        parts.push(currentPart.trim());
        currentPart = '';
      }
      
      // If single line is too long, truncate it
      if (line.length > SAFE_MESSAGE_LENGTH) {
        parts.push(line.substring(0, SAFE_MESSAGE_LENGTH - 3) + '...');
        continue;
      }
    }

    currentPart += line + '\n';
  }

  if (currentPart.trim()) {
    parts.push(currentPart.trim());
  }

  return parts.length > 0 ? parts : [message.substring(0, SAFE_MESSAGE_LENGTH)];
}

/**
 * Send message to Telegram chat via Bot API
 */
export async function sendMessageToChat(
  chatId: string,
  message: string,
  threadId?: string
): Promise<{ success: boolean; error?: string }> {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!token) {
    return { success: false, error: 'Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
  }

  const url = `${TELEGRAM_API_URL}/bot${token}/sendMessage`;
  const messageParts = splitMessage(message);

  try {
    // Send all message parts
    for (let i = 0; i < messageParts.length; i++) {
      const payload: TelegramMessage = {
        chat_id: chatId,
        text: messageParts[i],
        parse_mode: 'Markdown',
      };

      // Add thread_id if provided
      if (threadId) {
        payload.message_thread_id = parseInt(threadId, 10);
      }

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
        signal: AbortSignal.timeout(10000), // 10 second timeout
      });

      const data: TelegramResponse = await response.json();

      if (!data.ok) {
        // Handle specific Telegram API errors
        if (data.error_code === 400) {
          return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π chat_id –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' };
        } else if (data.error_code === 401) {
          return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' };
        } else if (data.error_code === 403) {
          return { success: false, error: '–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π' };
        } else {
          return { success: false, error: data.description || '–û—à–∏–±–∫–∞ Telegram API' };
        }
      }

      // Small delay between messages to avoid rate limiting
      if (i < messageParts.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    return { success: true };
  } catch (error) {
    if (error instanceof Error) {
      if (error.name === 'AbortError') {
        return { success: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram' };
      }
      return { success: false, error: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}` };
    }
    return { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' };
  }
}
